import React, { useState, useEffect } from 'react';
import { Wallet, Send, Eye, EyeOff, Copy, Plus, ArrowUpRight, ArrowDownLeft, RefreshCw, Settings, Shield, Download } from 'lucide-react';

const BlockchainWallet = () => {
  const [wallet, setWallet] = useState(null);
  const [balance, setBalance] = useState('0');
  const [network, setNetwork] = useState('ethereum');
  const [transactions, setTransactions] = useState([]);
  const [showPrivateKey, setShowPrivateKey] = useState(false);
  const [isLocked, setIsLocked] = useState(true);
  const [password, setPassword] = useState('');
  const [sendTo, setSendTo] = useState('');
  const [sendAmount, setSendAmount] = useState('');
  const [activeTab, setActiveTab] = useState('wallet');
  const [isCreating, setIsCreating] = useState(false);
  const [mnemonic, setMnemonic] = useState('');
  const [web3, setWeb3] = useState(null);

  const networks = {
    ethereum: { name: 'Ethereum', rpc: 'https://eth.llamarpc.com', symbol: 'ETH', chainId: 1 },
    polygon: { name: 'Polygon', rpc: 'https://polygon.llamarpc.com', symbol: 'MATIC', chainId: 137 },
    bsc: { name: 'BSC', rpc: 'https://bsc-dataseed1.binance.org', symbol: 'BNB', chainId: 56 }
  };

  // Initialize Web3
  useEffect(() => {
    const initWeb3 = async () => {
      if (typeof window !== 'undefined') {
        // Load Web3.js from CDN
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/web3/1.10.0/web3.min.js';
        script.onload = () => {
          const Web3 = window.Web3;
          const web3Instance = new Web3(networks[network].rpc);
          setWeb3(web3Instance);
        };
        document.head.appendChild(script);
      }
    };
    initWeb3();
  }, [network]);

  // Simple encryption (for demo - use proper encryption in production)
  const encryptData = (data, password) => {
    let encrypted = '';
    for (let i = 0; i < data.length; i++) {
      encrypted += String.fromCharCode(data.charCodeAt(i) ^ password.charCodeAt(i % password.length));
    }
    return btoa(encrypted);
  };

  const decryptData = (encryptedData, password) => {
    try {
      const encrypted = atob(encryptedData);
      let decrypted = '';
      for (let i = 0; i < encrypted.length; i++) {
        decrypted += String.fromCharCode(encrypted.charCodeAt(i) ^ password.charCodeAt(i % password.length));
      }
      return decrypted;
    } catch {
      return null;
    }
  };

  // Generate mnemonic phrase
  const generateMnemonic = () => {
    const words = [
      'abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse',
      'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act',
      'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit',
      'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'against', 'age',
      'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol',
      'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also'
    ];
    
    const mnemonicWords = [];
    for (let i = 0; i < 12; i++) {
      mnemonicWords.push(words[Math.floor(Math.random() * words.length)]);
    }
    return mnemonicWords.join(' ');
  };

  // Create new wallet
  const createWallet = async () => {
    if (!password || !web3) {
      alert('Please enter a password and wait for Web3 to load');
      return;
    }
    
    setIsCreating(true);
    try {
      const account = web3.eth.accounts.create();
      const generatedMnemonic = generateMnemonic();
      
      const encryptedPrivateKey = encryptData(account.privateKey, password);
      
      const walletData = {
        address: account.address,
        encryptedPrivateKey,
        createdAt: Date.now()
      };
      
      setWallet(account);
      setMnemonic(generatedMnemonic);
      setIsLocked(false);
      
      // Store in memory for this session
      window.walletData = walletData;
      
    } catch (error) {
      alert('Error creating wallet: ' + error.message);
    }
    setIsCreating(false);
  };

  // Import existing wallet
  const importWallet = async (privateKey) => {
    if (!password || !web3) {
      alert('Please enter a password and wait for Web3 to load');
      return;
    }

    try {
      // Clean the private key
      const cleanPrivateKey = privateKey.startsWith('0x') ? privateKey : '0x' + privateKey;
      
      const account = web3.eth.accounts.privateKeyToAccount(cleanPrivateKey);
      const encryptedPrivateKey = encryptData(account.privateKey, password);
      
      const walletData = {
        address: account.address,
        encryptedPrivateKey,
        createdAt: Date.now()
      };
      
      setWallet(account);
      setIsLocked(false);
      window.walletData = walletData;
      
    } catch (error) {
      alert('Error importing wallet: ' + error.message);
    }
  };

  // Unlock wallet
  const unlockWallet = async () => {
    if (!window.walletData || !password || !web3) return;
    
    try {
      const decryptedPrivateKey = decryptData(window.walletData.encryptedPrivateKey, password);
      if (!decryptedPrivateKey) {
        alert('Invalid password');
        return;
      }
      
      const account = web3.eth.accounts.privateKeyToAccount(decryptedPrivateKey);
      setWallet(account);
      setIsLocked(false);
    } catch (error) {
      alert('Error unlocking wallet: ' + error.message);
    }
  };

  // Get balance
  const getBalance = async () => {
    if (!wallet || !web3) return;
    
    try {
      const balanceWei = await web3.eth.getBalance(wallet.address);
      const balanceEth = web3.utils.fromWei(balanceWei, 'ether');
      setBalance(balanceEth);
    } catch (error) {
      console.error('Error fetching balance:', error);
      setBalance('Error');
    }
  };

  // Send transaction
  const sendTransaction = async () => {
    if (!wallet || !sendTo || !sendAmount || !web3) {
      alert('Please fill all fields and ensure Web3 is loaded');
      return;
    }

    try {
      const amountWei = web3.utils.toWei(sendAmount, 'ether');
      const gasPrice = await web3.eth.getGasPrice();
      const nonce = await web3.eth.getTransactionCount(wallet.address);
      
      const txObject = {
        to: sendTo,
        value: amountWei,
        gas: 21000,
        gasPrice: gasPrice,
        nonce: nonce
      };
      
      const signedTx = await web3.eth.accounts.signTransaction(txObject, wallet.privateKey);
      const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
      
      alert(`Transaction sent! Hash: ${receipt.transactionHash}`);
      setSendTo('');
      setSendAmount('');
      
      // Add to transaction history
      setTransactions(prev => [{
        hash: receipt.transactionHash,
        to: sendTo,
        amount: sendAmount,
        type: 'sent',
        timestamp: Date.now()
      }, ...prev]);
      
      // Refresh balance
      setTimeout(getBalance, 5000);
      
    } catch (error) {
      alert('Transaction failed: ' + error.message);
    }
  };

  // Copy to clipboard
  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    alert('Copied to clipboard!');
  };

  // Effects
  useEffect(() => {
    if (wallet && !isLocked && web3) {
      getBalance();
    }
  }, [wallet, network, isLocked, web3]);

  // Check for existing wallet on load
  useEffect(() => {
    if (window.walletData) {
      // Wallet exists but is locked
    }
  }, []);

  if (isLocked && !window.walletData) {
    // No wallet exists - show create/import options
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center p-4">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 max-w-md w-full border border-white/20">
          <div className="text-center mb-8">
            <Wallet className="w-16 h-16 text-blue-400 mx-auto mb-4" />
            <h1 className="text-3xl font-bold text-white mb-2">Personal Wallet</h1>
            <p className="text-blue-200">Create or import your blockchain wallet</p>
          </div>

          {!web3 && (
            <div className="mb-4 p-3 bg-yellow-500/20 border border-yellow-500/30 rounded-lg">
              <p className="text-yellow-300 text-sm">Loading Web3... Please wait.</p>
            </div>
          )}

          <div className="space-y-4">
            <input
              type="password"
              placeholder="Enter wallet password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
            />

            <button
              onClick={createWallet}
              disabled={isCreating || !web3}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-3 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-600 transition-all disabled:opacity-50"
            >
              {isCreating ? 'Creating...' : 'Create New Wallet'}
            </button>

            <div className="text-center text-blue-200">or</div>

            <button
              onClick={() => {
                const privateKey = prompt('Enter private key (with or without 0x prefix):');
                if (privateKey) importWallet(privateKey);
              }}
              disabled={!web3}
              className="w-full bg-white/10 text-white py-3 rounded-lg font-semibold hover:bg-white/20 transition-all border border-white/20 disabled:opacity-50"
            >
              Import Existing Wallet
            </button>
          </div>

          {mnemonic && (
            <div className="mt-6 p-4 bg-yellow-500/20 border border-yellow-500/30 rounded-lg">
              <h3 className="text-yellow-300 font-semibold mb-2 flex items-center">
                <Shield className="w-4 h-4 mr-2" />
                Save Your Seed Phrase
              </h3>
              <p className="text-yellow-200 text-sm mb-3">
                Write down these 12 words in order. This is the only way to recover your wallet.
              </p>
              <div className="bg-black/30 p-3 rounded text-white font-mono text-sm break-all">
                {mnemonic}
              </div>
              <button
                onClick={() => copyToClipboard(mnemonic)}
                className="mt-2 text-yellow-300 text-sm hover:text-yellow-200 flex items-center"
              >
                <Copy className="w-3 h-3 mr-1" />
                Copy to clipboard
              </button>
            </div>
          )}
        </div>
      </div>
    );
  }

  if (isLocked && window.walletData) {
    // Wallet exists but is locked
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center p-4">
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 max-w-md w-full border border-white/20">
          <div className="text-center mb-6">
            <Shield className="w-16 h-16 text-blue-400 mx-auto mb-4" />
            <h1 className="text-2xl font-bold text-white mb-2">Unlock Wallet</h1>
            <p className="text-blue-200">Enter your password to access your wallet</p>
          </div>

          {!web3 && (
            <div className="mb-4 p-3 bg-yellow-500/20 border border-yellow-500/30 rounded-lg">
              <p className="text-yellow-300 text-sm">Loading Web3... Please wait.</p>
            </div>
          )}

          <div className="space-y-4">
            <input
              type="password"
              placeholder="Enter wallet password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && unlockWallet()}
              className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
            />

            <button
              onClick={unlockWallet}
              disabled={!web3}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-3 rounded-lg font-semibold hover:from-blue-600 hover:to-purple-600 transition-all disabled:opacity-50"
            >
              Unlock Wallet
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Main wallet interface
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900">
      {/* Header */}
      <div className="bg-white/10 backdrop-blur-lg border-b border-white/20">
        <div className="max-w-6xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Wallet className="w-8 h-8 text-blue-400" />
              <h1 className="text-xl font-bold text-white">Personal Wallet</h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <select
                value={network}
                onChange={(e) => setNetwork(e.target.value)}
                className="bg-white/10 text-white px-3 py-2 rounded-lg border border-white/20 focus:outline-none focus:ring-2 focus:ring-blue-400"
              >
                {Object.entries(networks).map(([key, net]) => (
                  <option key={key} value={key} className="bg-gray-800">
                    {net.name}
                  </option>
                ))}
              </select>
              
              <button
                onClick={() => setIsLocked(true)}
                className="bg-red-500/20 text-red-300 px-3 py-2 rounded-lg hover:bg-red-500/30 transition-all"
              >
                Lock
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-6">
        {/* Balance Card */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 mb-6 border border-white/20">
          <div className="text-center">
            <h2 className="text-blue-200 text-sm uppercase tracking-wide mb-2">Total Balance</h2>
            <div className="text-4xl font-bold text-white mb-4">
              {parseFloat(balance || 0).toFixed(6)} {networks[network].symbol}
            </div>
            
            <div className="text-blue-200 text-sm mb-4 break-all">
              Address: {wallet?.address}
              <button
                onClick={() => copyToClipboard(wallet?.address)}
                className="ml-2 text-blue-400 hover:text-blue-300"
              >
                <Copy className="w-4 h-4 inline" />
              </button>
            </div>

            <div className="flex justify-center space-x-4">
              <button
                onClick={getBalance}
                disabled={!web3}
                className="bg-blue-500/20 text-blue-300 px-4 py-2 rounded-lg hover:bg-blue-500/30 transition-all flex items-center disabled:opacity-50"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh
              </button>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl border border-white/20 overflow-hidden">
          <div className="flex border-b border-white/20">
            {[
              { id: 'wallet', label: 'Send', icon: Send },
              { id: 'transactions', label: 'History', icon: ArrowUpRight },
              { id: 'settings', label: 'Settings', icon: Settings }
            ].map(({ id, label, icon: Icon }) => (
              <button
                key={id}
                onClick={() => setActiveTab(id)}
                className={`flex-1 px-6 py-4 text-center transition-all ${
                  activeTab === id
                    ? 'bg-blue-500/20 text-blue-300 border-b-2 border-blue-400'
                    : 'text-blue-200 hover:bg-white/5'
                }`}
              >
                <Icon className="w-4 h-4 inline mr-2" />
                {label}
              </button>
            ))}
          </div>

          <div className="p-6">
            {activeTab === 'wallet' && (
              <div className="space-y-4">
                <h3 className="text-white text-lg font-semibold mb-4">Send {networks[network].symbol}</h3>
                
                <input
                  type="text"
                  placeholder="Recipient address (0x...)"
                  value={sendTo}
                  onChange={(e) => setSendTo(e.target.value)}
                  className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
                />
                
                <input
                  type="number"
                  placeholder="Amount"
                  step="0.000001"
                  value={sendAmount}
                  onChange={(e) => setSendAmount(e.target.value)}
                  className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
                />
                
                <button
                  onClick={sendTransaction}
                  disabled={!web3}
                  className="w-full bg-gradient-to-r from-green-500 to-blue-500 text-white py-3 rounded-lg font-semibold hover:from-green-600 hover:to-blue-600 transition-all disabled:opacity-50"
                >
                  Send Transaction
                </button>
              </div>
            )}

            {activeTab === 'transactions' && (
              <div>
                <h3 className="text-white text-lg font-semibold mb-4">Transaction History</h3>
                {transactions.length === 0 ? (
                  <p className="text-blue-200 text-center py-8">No transactions yet</p>
                ) : (
                  <div className="space-y-3">
                    {transactions.map((tx, index) => (
                      <div key={index} className="bg-white/5 rounded-lg p-4 border border-white/10">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-3">
                            {tx.type === 'sent' ? (
                              <ArrowUpRight className="w-5 h-5 text-red-400" />
                            ) : (
                              <ArrowDownLeft className="w-5 h-5 text-green-400" />
                            )}
                            <div>
                              <div className="text-white font-medium">
                                {tx.type === 'sent' ? 'Sent' : 'Received'}
                              </div>
                              <div className="text-blue-200 text-sm break-all">
                                {tx.type === 'sent' ? `To: ${tx.to.slice(0, 10)}...` : `From: ${tx.to.slice(0, 10)}...`}
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className={`font-semibold ${tx.type === 'sent' ? 'text-red-400' : 'text-green-400'}`}>
                              {tx.type === 'sent' ? '-' : '+'}{tx.amount} {networks[network].symbol}
                            </div>
                            <div className="text-blue-200 text-sm">
                              {new Date(tx.timestamp).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'settings' && (
              <div className="space-y-6">
                <h3 className="text-white text-lg font-semibold">Wallet Settings</h3>
                
                <div className="bg-white/5 rounded-lg p-4 border border-white/10">
                  <h4 className="text-white font-medium mb-3">Private Key</h4>
                  <div className="flex items-center space-x-3">
                    <input
                      type={showPrivateKey ? 'text' : 'password'}
                      value={wallet?.privateKey || ''}
                      readOnly
                      className="flex-1 px-3 py-2 bg-white/10 border border-white/20 rounded text-white text-sm font-mono break-all"
                    />
                    <button
                      onClick={() => setShowPrivateKey(!showPrivateKey)}
                      className="text-blue-400 hover:text-blue-300 flex-shrink-0"
                    >
                      {showPrivateKey ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                    </button>
                    <button
                      onClick={() => copyToClipboard(wallet?.privateKey)}
                      className="text-blue-400 hover:text-blue-300 flex-shrink-0"
                    >
                      <Copy className="w-4 h-4" />
                    </button>
                  </div>
                  <p className="text-yellow-300 text-xs mt-2">⚠️ Never share your private key with anyone!</p>
                </div>

                <div className="bg-white/5 rounded-lg p-4 border border-white/10">
                  <h4 className="text-white font-medium mb-3">Export Wallet</h4>
                  <p className="text-blue-200 text-sm mb-3">
                    Download your wallet data for backup purposes.
                  </p>
                  <button
                    onClick={() => {
                      const data = {
                        address: wallet.address,
                        network: network,
                        exportedAt: new Date().toISOString()
                      };
                      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = `wallet-backup-${Date.now()}.json`;
                      a.click();
                    }}
                    className="bg-blue-500/20 text-blue-300 px-4 py-2 rounded-lg hover:bg-blue-500/30 transition-all flex items-center"
                  >
                    <Download className="w-4 h-4 mr-2" />
                    Export Wallet Data
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BlockchainWallet;